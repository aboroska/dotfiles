" ==== Vundle ====
set nocompatible              " be iMproved, required
filetype off                  " required

set ttymouse=sgr
" For fzf
set rtp+=/usr/local/opt/fzf
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'tpope/vim-obsession'
Plugin 'vim-erlang/vim-erlang-tags'
Plugin 'vim-erlang/vim-erlang-runtime'
Plugin 'vim-erlang/vim-erlang-compiler'
Plugin 'vim-erlang/vim-erlang-omnicomplete'
Plugin 'vim-erlang/vim-erlang-skeletons'
Plugin 'elixir-lang/vim-elixir'
Plugin 'slashmili/alchemist.vim'
Plugin 'tpope/vim-commentary'
Plugin 'ElmCast/elm-vim'
Plugin 'mileszs/ack.vim'
Plugin 'junegunn/fzf.vim'
" Used by snipmate
Plugin 'tomtom/tlib_vim'
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'garbas/vim-snipmate'
Plugin 'carlosgaldino/elixir-snippets'
" end snipmate
call vundle#end()

filetype plugin indent on

" ==== Colours ====
:set t_Co=256
:let g:solarized_termcolors=256
":colorscheme torte
:colorscheme solarized
":colorscheme desert
:set bg=light
"Disable Background Color Erase
:set t_ut=
"---- End Colours ----
:set shiftwidth=2
:set softtabstop=2
:set expandtab smarttab
:set incsearch
:set hls
"Always show the status bar
:set laststatus=2

:syntax enable
autocmd BufRead *.py set smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class
au BufRead,BufNewFile *.es set filetype=erlang
let NERDTreeIgnore=['__init__.py','.pyc$', '\~$', '\.o$']
let g:netrw_list_hide= '.*\.swp$,\.git/$,.*\.pyc'
:let html_start_line = line("'<")
:let html_end_line = line("'>")
"Ignore whitespace in vimdiff
:set diffopt+=iwhite
"To insert the elipsis, press ctrl-vu followed by the numeric code for elipsis: 2026
":set showbreak=â€¦
:set showbreak=...
:set ruler
:set wildmenu
:set visualbell t_vb=
:set dir=~/.vimswap//,/tmp//,.
:set nrformats=hex
"Add include dir for Erlang header files, used by gf
:set path+=../include
let g:erlang_quickfix_support = 1
"let g:erlang_make_options = '--outdir /Users/aboroska/tmp --xref'
let g:erlang_flymake_options = '--outdir /Users/aboroska/tmp --xref'
"Man pages
:runtime! ftplugin/man.vim
:set mouse=a

" ==== Plugins ====
"command-t http://mislav.uniqpath.com/2011/12/vim-revisited/
" use comma as <Leader> key instead of backslash
let mapleader=","
" double percentage sign in command mode is expanded
" to directory of current file - http://vimcasts.org/e/14
cnoremap %% <C-R>=expand('%:h').'/'<cr>
map <leader>f :CommandTFlush<cr>\|:CommandT<cr>
map <leader>F :CommandTFlush<cr>\|:CommandT %%<cr>
nnoremap <leader><leader> <c-^>

if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif
let $FZF_DEFAULT_COMMAND = 'ag -g ""'
nnoremap <Leader>a :Ack!<Space>
nmap ; :Files<CR>

:imap <Tab> <C-P>
:imap <S-Tab> <Plug>snipMateNextOrTrigger
"set runtimepath^=~/.vim/bundle/vim-erlang-runtime/
"set runtimepath^=~/.vim/bundle/ctrlp.vim
"set runtimepath+=~/github/vim-addon-manager
"call vam#ActivateAddons(["vim-addon-mw-utils"])

let g:ctrlp_custom_ignore = {
      \  'dir': '\v(_build|node_modules)$',
       \ 'file': '\v\.beam$'
       \ }
let g:ctrlp_root_markers = ['.CTRLP_ROOT']
" surround: b surrounds text with {% %} for djangohtml
autocmd FileType htmldjango let b:surround_{char2nr("b")} = "{% \r %}"
"call pathogen#infect() TODO remove
" vim-commentary
autocmd FileType erlang setlocal commentstring=\%\ %s
autocmd FileType elixir setlocal commentstring=\#\ %s

" ==== CTAGS ====
au FileType elixir set tags+=~/src/elixir/rumbl/tags,~/github/phoenix/tags,~/github/elixir/tags
"set tags+=~/github/aboroska/wombat/tags
set tags+=~/w/tags
set tags+=~/otpinst/r19.3.6.2/tags

"augroup session
"    autocmd!
"    autocmd VimEnter * call LoadSession()
"    autocmd VimLeave * call SaveSession()
"    function! SaveSession()
"      execute 'mksession! $HOME/.vim/sessions/session.vim'
"    endfunction
"    function! LoadSession()
"      if argc() == 0
"        execute 'source $HOME/.vim/sessions/session.vim'
"      endif
"    endfunction
"augroup END

" Change current path to the open buffer
autocmd BufEnter * silent! lcd %:p:h

" jump to tag when enter pressed
"nmap <CR> <C-]>
let g:alchemist_tag_map = '<CR>'
nmap <CR> :set isk+=:<cr><c-]><c-o>:se isk-=:<cr><c-i>

" switch between horizontal splits
:map <C-Down> <C-W><Down><C-W>_
:map <C-Up> <C-W><Up><C-W>_

map h1 yypVr=o

"
noremap <Space> :
"noremap w :w<CR>

nmap <C-e> :b#<CR>

" Don't move on *
nnoremap * *<c-o>

" Window resizing
nnoremap <c-a-left> 5<c-w><
nnoremap <c-a-right> 5<c-w>>

" Source
vnoremap <leader>s y:execute @@<cr>:echo 'Sourced selection.'<cr>
nnoremap <leader>s ^vg_y:execute @@<cr>:echo 'Sourced line.'<cr>

" Use sane regexes.
nnoremap / /\v
vnoremap / /\v

" Easier to type
noremap H ^
noremap L $
vnoremap L g_

" "Uppercase word" mapping.
"
" This mapping allows you to press <c-u> in insert mode to convert the current
" word to uppercase.  It's handy when you're writing names of constants and
" don't want to use Capslock.
"
" To use it you type the name of the constant in lowercase.  While your
" cursor is at the end of the word, press <c-u> to uppercase it, and then
" continue happily on your way:
"
"                            cursor
"                            v
"     max_connections_allowed|
"     <c-u>
"     MAX_CONNECTIONS_ALLOWED|
"                            ^
"                            cursor
"
" It works by exiting out of insert mode, recording the current cursor location
" in the z mark, using gUiw to uppercase inside the current word, moving back to
" the z mark, and entering insert mode again.
"
" Note that this will overwrite the contents of the z mark.  I never use it, but
" if you do you'll probably want to use another mark.
inoremap <C-u> <esc>mzgUiw`za

set spelllang=en,de,hu
"Turn off toolbar
set guioptions-=T

"OS X needs this
set backspace=2

" ==== From Csaba ====

noremap Q <nop>

" --------- "
" Underline "
" --------- "

" Underline:
"   Underlines the current line with the given character.
" Example:
"   Type this line:
"       something
"   Type the following command while the cursor is on that line:
"       :call Underline('-')
"   Now the line has been underlined with '-':
"       something
"       ---------
function! Underline(ch)
   let len = strlen(substitute(getline("."), ".", "x", "g"))
   normal o
   call setline(".",repeat(a:ch, len))
endfunction

" ,<char><char> underlines the current line with <char>.
" <char> may be any of the followings: - = ^ " ' :
noremap ,-- :call Underline('-')<cr>
noremap ,== :call Underline('=')<cr>
noremap ,^^ :call Underline('^')<cr>
noremap ,"" :call Underline('"')<cr>
noremap ,'' :call Underline("'")<cr>
noremap ,:: :call Underline(":")<cr>

" ----------------------------- "
" Copying stuff to the keyboard "
" ----------------------------- "

command! FileNameToClipboard let @+=expand('%:p') | let @*=@+
command! PathToClipboard let @+=expand('%:p:h') | let @*=@+
command! PureFileNameToClipboard let @+=expand('%:t') | let @*=@+
command! ModuleNameToClipboard let @+=expand('%:t:r') | let @*=@+

" end Csaba
